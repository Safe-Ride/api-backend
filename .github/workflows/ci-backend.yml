name: ci-backend

on:
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the code
        uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Build Maven
        run: mvn -f pom.xml clean package

      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: aplicacao
          path: target/*.jar

      - name: LS
        run: ls

      - name: Upload Scripts
        uses: actions/upload-artifact@v4
        with:
          name: scripts
          path: .github/scripts/*

  docker:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_BACKEND_USER }}
          password: ${{ secrets.DOCKERHUB_BACKEND_TOKEN }}

      - name: Build and Push
        uses: docker/build-push-action@v5
        with:
          context: ./
          push: true
          tags: brunolimabh/api-backend:latest

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build
      - docker

    steps:
      - name: Recuperar JAR
        uses: actions/download-artifact@v4
        with:
          name: aplicacao
          path: ./

      - name: Recuperar scripts
        uses: actions/download-artifact@v4
        with:
          name: scripts
          path: .github/scripts

      - name: Criar arquivo .pem
        run: |
          echo "${{ secrets.DEPLOY_KEY }}" > $HOME/${{ secrets.NOME_ARQUIVO_PEM }}
          chmod 400 $HOME/${{ secrets.NOME_ARQUIVO_PEM }}
    
      - name: Enviar o JAR p/ a EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ubuntu
          key: ${{ secrets.DEPLOY_KEY }}
          source: "./*.jar" # enviando todos os .jar (estão lá graças ao step 'Recuperar jars')
          target: "/home/ubuntu/deploy-api/" # diretório de destino na ec2 pública

      - name: Enviar scripts para EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ubuntu
          key: ${{ secrets.DEPLOY_KEY }}
          source: "./.github/scripts/*"
          target: "/home/ubuntu/deploy-api/" # diretório de destino na ec2 pública

      # Conectar à EC2 pública e implantar na EC2 privada
      - name: Implantar na EC2 privada
        run: |
          ssh -T -o StrictHostKeyChecking=no -i $HOME/${{ secrets.NOME_ARQUIVO_PEM }} ubuntu@${{ secrets.DEPLOY_HOST }} << 'EOF'
            echo "${{ secrets.DEPLOY_KEY }}" >> $HOME/${{ secrets.NOME_ARQUIVO_PEM }}

            # Copiar arquivos para a EC2 privada
            scp -i $HOME/${{ secrets.NOME_ARQUIVO_PEM }} /home/ubuntu/deploy-api/*.jar ubuntu@${{ secrets.IP_PRIVADO_EC2 }}:/home/ubuntu/deploy-api/
            scp -i $HOME/${{ secrets.NOME_ARQUIVO_PEM }} /home/ubuntu/deploy-api/*.sh ubuntu@${{ secrets.IP_PRIVADO_EC2 }}:/home/ubuntu/deploy-api/
            
            # Reiniciar a aplicação na EC2 privada
            ssh -i $HOME/${{ secrets.NOME_ARQUIVO_PEM }} ubuntu@${{ secrets.IP_PRIVADO_EC2 }} "sudo docker run -d --name brunolimabh -p 8080:8080 brunolimabh/api-backend"
          EOF
